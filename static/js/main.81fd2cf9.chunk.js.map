{"version":3,"sources":["sortingAlgorithms/helpers.js","sortingAlgorithms/merge.js","sortingAlgorithms/heap.js","sortingAlgorithms/quick.js","components/Toolbar/Toolbar.js","components/sortingVisualizer/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["createRandomArray","size","min","max","array","i","push","Math","floor","random","mergeSortHelper","mainArray","startIdx","endIdx","auxiliaryArray","animations","middleIdx","k","j","doMerge","getHeapSortAnimations","length","slice","maxHeapifyAnimation","buildMaxHeapAnimation","heapSize","heapSortAnimation","largest","left","right","getQuickSortAnimations","quickSortAnimation","p","r","q","pivotIdx","pivot","swapAnimation","partitionAnimation","Toolbar","props","resetArray","mergeSort","heapSort","quickSort","stopSorting","className","id","onClick","timeoutIdsCount","SortingVisualizer","useState","setArray","changeBarsColor","color","arraysBars","document","getElementsByClassName","style","backgroundColor","useEffect","enableButtonClass","getElementById","classList","remove","add","disabled","toggleButtonClass","isDisabled","toggle","getMergeSortAnimations","jsSortedHeights","sort","a","b","map","bar","setTimeout","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","window","height","newHeight","clearTimeout","value","idx","key","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.81fd2cf9.chunk.js","sourcesContent":["export default function createRandomArray(size) {\n    const array = []\n    for (let i = 0; i < size; i++) {\n        array.push(getRandomIntFromInterval(5, 700));\n    }\n\n    return array;\n}\n\nfunction getRandomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min; //The maximum is exclusive and the minimum is inclusive\n}\n\nexport function checkSortedBar(mainArray, i) {\n    const jsSortedArray = mainArray.slice();\n    jsSortedArray.sort((a, b) => a - b);\n    if (mainArray[i] !== jsSortedArray[i]) return false;\n    return true;\n}","export default function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n\nexport function mergeSortAlgo(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    \n    return array;\n}\n\n\nfunction mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);    \n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    \n    while (i <= middleIdx && j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, j]);\n\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n            // We overwrite the value at index k in the original array with the\n            // value at index i in the auxiliary array.\n            animations.push([k, auxiliaryArray[i]]);\n            mainArray[k++] = auxiliaryArray[i++];\n        } else {\n            // We overwrite the value at index k in the original array with the\n            // value at index j in the auxiliary array.\n            animations.push([k, auxiliaryArray[j]]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    }\n    while (i <= middleIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, i]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, i]);\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([j, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([j, j]);\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n    }\n}","export default function getHeapSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    heapSortAnimation(array, auxiliaryArray, animations);\n\n    return animations;\n}\n\n\nfunction heapSortAnimation(mainArray, auxiliaryArray, animations) {\n    buildMaxHeapAnimation(mainArray, auxiliaryArray, animations);\n    let heapSize = mainArray.length - 1\n    for (let i = heapSize; i > 0; i--) {\n        animations.push([0, i], [0, i]);\n        animations.push([0, auxiliaryArray[i]]);\n        mainArray[0] = auxiliaryArray[i];\n        animations.push([i, auxiliaryArray[0]]);\n        mainArray[i] = auxiliaryArray[0];\n        maxHeapifyAnimation(auxiliaryArray, heapSize, 0, mainArray, animations)\n        heapSize--;\n    }\n}\n\nfunction buildMaxHeapAnimation(mainArray, auxiliaryArray, animations) {\n    const size = mainArray.length;\n\n    for (let i = Math.floor(size / 2) - 1; i >= 0; i--) {\n        maxHeapifyAnimation(mainArray, size, i, auxiliaryArray, animations);\n    }\n\n    return animations;\n}\n\nfunction maxHeapifyAnimation(mainArray, size, i, auxiliaryArray, animations) {\n    let largest = i;\n    let left = i * 2 + 1;\n    let right = left + 1;\n\n    if (auxiliaryArray[right] > auxiliaryArray[left]) {\n\n        if (right < size && auxiliaryArray[right] > auxiliaryArray[largest]) {\n            animations.push([right, largest], [right, largest]);\n            largest = right\n        }\n    } else {\n\n        if (left < size && auxiliaryArray[left] > auxiliaryArray[largest]) {\n            animations.push([left, largest], [left, largest]);\n            largest = left;\n        }\n    }\n    if (largest !== i) {\n        animations.push([i, auxiliaryArray[largest]]);\n        mainArray[i] = auxiliaryArray[largest];\n        mainArray[largest] = auxiliaryArray[i];\n        animations.push([largest, auxiliaryArray[i]]);\n        mainArray[largest] = auxiliaryArray[i];\n        auxiliaryArray[i] = mainArray[i];\n        auxiliaryArray[largest] = mainArray[largest];\n        maxHeapifyAnimation(mainArray, size, largest, auxiliaryArray, animations);\n    }\n\n    return animations;\n\n}\n\n\n\n///////// original functions /////////\n\nfunction maxHeapify(array, size, i) {\n    let largest = i;\n    let left = i * 2 + 1;\n    let right = left + 1;\n\n    if (right < size && array[right] > array[largest]) {\n        largest = right\n    }\n\n    if (left < size && array[left] > array[largest]) {\n        largest = left;\n    }\n\n    if (largest !== i) {\n        const temp = array[i];\n        array[i] = array[largest];\n        array[largest] = temp;\n        maxHeapify(array, size, largest);\n    }\n    return array\n\n}\n\nfunction buildMaxHeap(array) {\n    const size = array.length;\n\n    for (let i = Math.floor(size / 2) - 1; i >= 0; i--) {\n        console.log(i);\n\n        maxHeapify(array, size, i)\n    }\n\n    return array;\n}\n\n\nfunction heapSort(array) {\n    buildMaxHeap(array);\n    let heapSize = array.length - 1\n    for (let i = heapSize; i > 0; i--) {\n        const temp = array[i];\n        array[i] = array[0];\n        array[0] = temp;\n        maxHeapify(array, heapSize, 0)\n        heapSize--;\n    }\n\n    return array;\n}\n","export default function getQuickSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    const size = array.length - 1; \n    quickSortAnimation(array, 0, size, auxiliaryArray, animations);\n\n    return animations;\n}\n\n\nfunction quickSortAnimation(mainArray, p, r, auxiliaryArray, animations) {\n    if (p < r) {\n        const q = partitionAnimation(mainArray, p, r, auxiliaryArray, animations);\n        quickSortAnimation(mainArray, p, q-1, auxiliaryArray, animations);\n        quickSortAnimation(mainArray, q, r, auxiliaryArray, animations);\n    }\n\n    return mainArray;\n}\n\nfunction partitionAnimation(mainArray, p, r, auxiliaryArray, animations) {\n    let pivotIdx = getRandomIntFromInterval(p+1, r);\n    const pivot = auxiliaryArray[pivotIdx];\n    swapAnimation(mainArray, pivotIdx, r, auxiliaryArray, animations);\n    let i = p - 1;\n    for(let j = p; j < r; j++) {\n        if (mainArray[j] <= pivot) {\n            i++;\n            swapAnimation(mainArray, i, j, auxiliaryArray, animations);\n        }\n    }\n    pivotIdx = i+1;\n    swapAnimation(mainArray, pivotIdx, r, auxiliaryArray, animations);\n\n    return pivotIdx;\n    \n}\n\nfunction swapAnimation(mainArray, i, j, auxiliaryArray, animations) {\n    animations.push([i, j], [i, j]);\n    animations.push([i, auxiliaryArray[j]]);\n    mainArray[i] = auxiliaryArray[j];\n    animations.push([j, auxiliaryArray[i]]);\n    mainArray[j] = auxiliaryArray[i];\n    auxiliaryArray[i] = mainArray[i];\n    auxiliaryArray[j] = mainArray[j];\n\n    return mainArray;\n}\n\n// const nums = createRandomArray(100);\n\n\n// function createRandomArray(size) {\n//     let nums = []\n//     for (let i = 0; i < size; i++) {\n//         nums.push(getRandomIntFromInterval(0, 1000));\n//     }\n\n//     return nums;\n// }\n\n// console.log(quickSort(nums, 0, nums.length -1));\n\n\n//////// Original Quick Sort ///////////\n\n\n// function quickSort(array, p, r) {\n//     if (p < r) {\n//         const q = partition(array, p, r);\n//         quickSort(array, p, q-1);\n//         quickSort(array, q, r);\n//     }\n\n//     return array;\n// }\n\n// function partition(array, p, r) {\n//     let pivotIdx = getRandomIntFromInterval(p+1, r);\n//     const pivot = array[pivotIdx];\n//     array[pivotIdx] = array[r];\n//     array[r] = pivot;\n//     let i = p - 1;\n//     for(let j = p; j < r; j++) {\n//         if (array[j] <= pivot) {\n//             i++;\n//             swap(array, i, j);\n//         }\n//     }\n//     pivotIdx = i+1;\n//     swap(array, pivotIdx, r);\n\n//     return pivotIdx;\n    \n// }\n\nfunction getRandomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min; //The maximum is exclusive and the minimum is inclusive\n}\n\n\n\n","import React, { useState, useEffect } from 'react';\n\nimport './Toolbar.css';\n\n\nexport default function Toolbar(props) {\n\n    const { resetArray, mergeSort, heapSort, quickSort, stopSorting } = props;\n    \n    return (\n        <div className=\"toolbar-container\">\n            <div className=\"main-logo\">Sorting Visualizer</div>\n            <div className=\"main-manu\">\n                {/* <button className=\"button\" onClick={testSortingAlgorithms}>Test Sorting Algorithms</button> */}\n                <button id=\"btn-0\" className=\"generate-btn\" onClick={resetArray}>Generate New Array</button>\n                <button id=\"btn-4\" className=\"stop-btn\" onClick={stopSorting}>Stop!</button>\n                <button id=\"btn-1\" className=\"toolbar-btn\" onClick={mergeSort}>Merge Sort</button>\n                <button id=\"btn-2\" className=\"toolbar-btn\" onClick={heapSort}>Heap Sort</button>\n                <button id=\"btn-3\" className=\"toolbar-btn\" onClick={quickSort}>Quick Sort</button>\n            </div>\n        </div>\n    );\n}\n\n\n\n\n\n\n\n\n\n\n\n","import React, { useState, useEffect } from 'react';\nimport createRandomArray from '../../sortingAlgorithms/helpers';\nimport getMergeSortAnimations, { mergeSortAlgo } from '../../sortingAlgorithms/merge';\nimport getHeapSortAnimations from '../../sortingAlgorithms/heap';\nimport getQuickSortAnimations from '../../sortingAlgorithms/quick';\n\nimport Toolbar from '../Toolbar/Toolbar.js';\n\nimport './SortingVisualizer.css';\n\nconst ANIMATION_SPEED_MS = 4;\nconst NUMBER_OF_BARS = 100;\nconst PRIMARY_COLOR = 'blueviolet';\nconst SORTED_COLOR = '#7FFFD4';\nconst SECONDARY_COLOR = 'red';\nvar timeoutIdsCount = 0;\n\nexport default function SortingVisualizer(props) {\n\n    const [array, setArray] = useState(createRandomArray(NUMBER_OF_BARS));\n\n    const resetArray = () => {\n        const array = createRandomArray(NUMBER_OF_BARS);\n        setArray([ ...array ]);\n        changeBarsColor(PRIMARY_COLOR);\n    }\n\n    const changeBarsColor = (color) => {\n        const arraysBars = document.getElementsByClassName('array-bar');\n        for (let i = 0; i < arraysBars.length; i++) {\n            arraysBars[i].style.backgroundColor = color;\n        }\n    }\n\n    useEffect(() => {\n        resetArray();\n        enableButtonClass();\n    }, []);\n\n\n    const mergeSort = () => {\n        toggleButtonClass();\n        const animations = getMergeSortAnimations(array);\n        const jsSortedArray = array.slice().sort((a, b) => a - b);\n        const jsSortedHeights = jsSortedArray.map(bar => `${bar}px`);\n\n        for (let i = 0; i < animations.length; i++) {\n            if (i === animations.length - 1) {\n                setTimeout(() => {\n                    toggleButtonClass();\n                }, ANIMATION_SPEED_MS * i);\n            }\n            const arraysBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arraysBars[barOneIdx].style;\n                const barTwoStyle = arraysBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                timeoutIdsCount = window.setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                    if (color === PRIMARY_COLOR && jsSortedHeights[barOneIdx] === barOneStyle.height) {\n                        barOneStyle.backgroundColor = SORTED_COLOR;\n                    }\n                }, i * ANIMATION_SPEED_MS);\n            } else {\n                timeoutIdsCount = window.setTimeout(() => {\n                    const [barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arraysBars[barOneIdx].style;\n                    barOneStyle.height = `${newHeight}px`;\n                    if (jsSortedHeights[barOneIdx] === barOneStyle.height) {\n                        barOneStyle.backgroundColor = SORTED_COLOR;\n                    }\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    const heapSort = () => {\n        toggleButtonClass();\n        const animations = getHeapSortAnimations(array);\n        const jsSortedArray = array.slice().sort((a, b) => a - b);\n        const jsSortedHeights = jsSortedArray.map(bar => `${bar}px`);\n        \n        for (let i = 0; i < animations.length; i++) {\n            if (i === animations.length - 1) {\n                setTimeout(() => {\n                    toggleButtonClass();\n                }, ANIMATION_SPEED_MS * i);\n            }\n            const arraysBars = document.getElementsByClassName('array-bar');\n            const isColorChange = (i % 4 !== 2) && (i % 4 !== 3);\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arraysBars[barOneIdx].style;\n                const barTwoStyle = arraysBars[barTwoIdx].style;\n                const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                timeoutIdsCount = window.setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            } else {\n                timeoutIdsCount = window.setTimeout(() => {\n                    const [barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arraysBars[barOneIdx].style;\n                    barOneStyle.height = `${newHeight}px`\n                    if (jsSortedHeights[barOneIdx] === barOneStyle.height) {\n                        barOneStyle.backgroundColor = SORTED_COLOR;\n                    }\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n    \n    const quickSort = () => {\n        toggleButtonClass();\n        const animations = getQuickSortAnimations(array);\n        const jsSortedArray = array.slice().sort((a, b) => a - b);\n        const jsSortedHeights = jsSortedArray.map(bar => `${bar}px`);\n        \n        for (let i = 0; i < animations.length; i++) {\n            if (i === animations.length - 1) {\n                setTimeout(() => {\n                    toggleButtonClass();                    \n                }, ANIMATION_SPEED_MS * i);\n            }\n            const arraysBars = document.getElementsByClassName('array-bar');\n            const isColorChange = (i % 4 !== 2) && (i % 4 !== 3);\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arraysBars[barOneIdx].style;\n                const barTwoStyle = arraysBars[barTwoIdx].style;\n                const color = (i % 4 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                timeoutIdsCount = window.setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            } else {\n                timeoutIdsCount = window.setTimeout(() => {\n                    const [barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arraysBars[barOneIdx].style;\n                    barOneStyle.height = `${newHeight}px`;\n                    if (jsSortedHeights[barOneIdx] === barOneStyle.height) {\n                        barOneStyle.backgroundColor = SORTED_COLOR;\n                    }\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n\n    const testSortingAlgorithms = () => {\n        for (let i = 0; i < 100; i++) {\n            const mainArray = createRandomArray(NUMBER_OF_BARS);\n            const jsSortedArray = mainArray.slice();\n            jsSortedArray.sort((a, b) => a - b);\n            mergeSortAlgo(mainArray);\n            for (let j = 0; j < mainArray.length; j++) {\n                const element = mainArray[j];\n                const jsElement = jsSortedArray[j];\n                if (element !== jsElement) return false;\n            }\n\n            return console.log(true);\n        }\n    }\n\n    const stopSorting = () => {\n        while (timeoutIdsCount > 0) {\n            window.clearTimeout(timeoutIdsCount); // will do nothing if no timeout with id is present\n            timeoutIdsCount--;\n        }\n        enableButtonClass();\n        resetArray();\n        \n    }\n\n    const enableButtonClass = () => {\n        for (let i = 0; i < 5; i++) {\n            if (i === 0) {\n                document.getElementById(`btn-${i}`).classList.remove('generate-btn-running');\n                document.getElementById(`btn-${i}`).classList.add('generate-btn');\n                document.getElementById(`btn-${i}`).disabled = false;\n            } else if (i === 4) {\n                document.getElementById(`btn-${i}`).classList.remove('stop-btn-running');\n                document.getElementById(`btn-${i}`).classList.add('stop-btn');\n                document.getElementById(`btn-${i}`).disabled = true;\n            } else {\n                document.getElementById(`btn-${i}`).classList.remove('toolbar-btn-running');\n                document.getElementById(`btn-${i}`).classList.add('toolbar-btn');\n                document.getElementById(`btn-${i}`).disabled = false;\n            }\n            \n        }\n    }\n\n    const toggleButtonClass = () => {\n        for (let i = 0; i < 5; i++) {\n            const isDisabled = document.getElementById(`btn-${i}`).disabled\n            if (i === 0) {\n                document.getElementById(`btn-${i}`).classList.toggle('generate-btn-running');\n                document.getElementById(`btn-${i}`).classList.toggle('generate-btn');\n            } else if (i === 4) {\n                document.getElementById(`btn-${i}`).classList.toggle('stop-btn-running');\n                document.getElementById(`btn-${i}`).classList.toggle('stop-btn');\n            } else {\n                document.getElementById(`btn-${i}`).classList.toggle('toolbar-btn-running');\n                document.getElementById(`btn-${i}`).classList.toggle('toolbar-btn');\n            }\n            document.getElementById(`btn-${i}`).disabled = !isDisabled;\n        }\n    };\n\n    return (\n        <div className=\"app-body\">\n            <div className=\"main-manu-container\">\n                <Toolbar\n                    resetArray={resetArray}\n                    mergeSort={mergeSort} \n                    heapSort={heapSort}\n                    quickSort={quickSort}\n                    stopSorting={stopSorting}\n                    ></Toolbar>\n                <div className=\"main-message\">Generate an Array and Choose which Sorting algorithm to Visualize!</div>\n            </div>\n            <div className=\"array-container\">\n                {array.map((value, idx) => (\n                    <div\n                        className=\"array-bar\"\n                        key={idx}\n                        style={{\n                            backgroundColor: PRIMARY_COLOR,\n                            height: `${value}px`\n                        }}></div>\n                ))}\n            </div>\n\n        </div>\n    );\n} \n","import React from 'react';\nimport SortingVisualizer from './components/sortingVisualizer/SortingVisualizer.js'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}